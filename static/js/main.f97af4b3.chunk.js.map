{"version":3,"sources":["App.js","reportWebVitals.js","pages/ImageLoader.js","index.js"],"names":["App","props","fileSelectedHandle","e","file","target","files","reader","FileReader","onload","readyState","img","document","createElement","src","result","setState","currentImage","previewImage","readAsDataURL","classifyImage","a","automl","model","state","classify","predictions","console","log","predictScore","this","reduce","acc","item","prob","label","className","type","accept","name","id","onChange","alt","length","Math","round","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ImageLoader","ReactDOM","render","StrictMode","path","component","getElementById"],"mappings":"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","file":"static/js/main.f97af4b3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as automl from '@tensorflow/tfjs-automl';\nimport '@tensorflow/tfjs-backend-webgl';\n//import SampleDog from '../images/dogTest.jpg';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n        currentImage: '',\n        previewImage: 'https://media.istockphoto.com/vectors/cat-and-dog-peeking-over-blank-sign-vector-id1141985544',\n        predictScore: []\n    }\n  \n  }\n\nfileSelectedHandle = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = () =>{\n      if(reader.readyState === 2) {\n        const img = document.createElement(\"img\"); //tensorflow requires an image element or ImageData as input.\n        img.src = reader.result;\n        this.setState({ currentImage: img, previewImage: reader.result });\n      }\n    }\n    reader.readAsDataURL(file)\n}\n\n\n\nclassifyImage = async () => {\nconst model = await automl.loadImageClassification('./image_classification_model_v1/model.json')\n\n//const img = document.getElementById('animal_image');\n\nconst {currentImage} = this.state\nconst predictions = await model.classify(currentImage)\n\nconsole.log('predictions', predictions)\nthis.setState({predictScore: predictions})\n}\n\nrender() {\n\nconst { previewImage } = this.state\nconst { predictScore } = this.state\n\nconst { label, prob } = predictScore.reduce(\n    (acc, item) => (acc = acc.prob > item.prob ? acc : item),\n    {}\n  );\n\nreturn (\n    <div className=\"container\">\n       <div className=\"img-main\">\n        <h2>Image Classification Demo</h2>\n        <p>Upload an image of a cat or dog to check the prediction score</p>\n        <div >\n            <input \n                type=\"file\" \n                accept=\"image/*\"\n                name=\"image-upload\"\n                id=\"input\"\n                onChange={this.fileSelectedHandle} \n            />\n        </div>\n        <div className=\"img-display\">\n            <img id=\"animal_image\" src={previewImage} alt=\"a test\" />\n\n              {this.state.predictScore.length ? \n                <span \n                    className=\"img-result\">\n                    The classification model predicted the uploaded image is {Math.round(prob * 100)}% of a {label} \n                </span>\n                : <div></div>\n              }\n             \n        </div>\n            { this.state.currentImage === '' ?\n            <div></div>\n            :<button \n                className=\"img-loader-button\"\n                onClick={() => this.classifyImage()}>Predict Score\n            </button>\n              }\n       </div>\n\n    </div>\n)\n}\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react';\nimport * as automl from '@tensorflow/tfjs-automl';\nimport '@tensorflow/tfjs-backend-webgl';\n//import SampleDog from '../images/dogTest.jpg';\nimport './imageloader.css';\n\nexport class ImageLoader extends Component {\n\n        \n          constructor(props){\n            super(props)\n            this.state = {\n                currentImage: '',\n                previewImage: 'https://media.istockphoto.com/vectors/cat-and-dog-peeking-over-blank-sign-vector-id1141985544',\n                predictScore: []\n            }\n          \n          }\n\n        fileSelectedHandle = (e) => {\n            const file = e.target.files[0];\n            const reader = new FileReader();\n        \n            reader.onload = () =>{\n              if(reader.readyState === 2) {\n                const img = document.createElement(\"img\"); //tensorflow requires an image element or ImageData as input.\n                img.src = reader.result;\n                this.setState({ currentImage: img, previewImage: reader.result });\n              }\n            }\n            reader.readAsDataURL(file)\n        }\n\n\n\n    classifyImage = async () => {\n        const model = await automl.loadImageClassification('./image_classification_model_v1/model.json')\n\n        //const img = document.getElementById('animal_image');\n\n        const {currentImage} = this.state\n        const predictions = await model.classify(currentImage)\n\n        console.log('predictions', predictions)\n        this.setState({predictScore: predictions})\n    }\n\n    render() {\n\n        const { previewImage } = this.state\n        const { predictScore } = this.state\n\n        const { label, prob } = predictScore.reduce(\n            (acc, item) => (acc = acc.prob > item.prob ? acc : item),\n            {}\n          );\n\n        return (\n            <div className=\"container\">\n               <div className=\"img-main\">\n                <h2>Image Classification Demo</h2>\n                <p>Upload an image of a cat or dog to check the prediction score</p>\n                <div >\n                    <input \n                        type=\"file\" \n                        accept=\"image/*\"\n                        name=\"image-upload\"\n                        id=\"input\"\n                        onChange={this.fileSelectedHandle} \n                    />\n                </div>\n                <div className=\"img-display\">\n                    <img id=\"animal_image\" src={previewImage} alt=\"a test\" />\n\n                      {this.state.predictScore.length ? \n                        <span \n                            className=\"img-result\">\n                            The classification model predicted the uploaded image is {Math.round(prob * 100)}% of a {label} \n                        </span>\n                        : <div></div>\n                      }\n                     \n                </div>\n                    { this.state.currentImage === '' ?\n                    <div></div>\n                    :<button \n                        className=\"img-loader-button\"\n                        onClick={() => this.classifyImage()}>Predict Score\n                    </button>\n                      }\n               </div>\n\n            </div>\n        )\n    }\n}\n\nexport default ImageLoader\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport ImageLoader from './pages/ImageLoader'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch> \n          <Route path=\"/imageload\" component={ImageLoader} />\n          <Route path=\"/\" component={App} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}